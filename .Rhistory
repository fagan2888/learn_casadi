library(reticulate)
csd = import("casadi")
x = csd$MX$sym('x', 5)
x = csd$MX$sym('x', 5L)
y = csd$norm_2(x)
x
y
grad_y = csd.gradient(y, x)
grad_y = csd$gradient(y, x)
grad_y
f = csd$Function('f', [x], [grad_y])
f = csd$Function('f', list(x), list(grad_y))
grad_y_num = f(c(1, 2, 3, 4, 5))
x = csd$MX$sym('x', 2L)
z = x[1]**2
z = csd.power(x[1], 2L)
z = csd$power(x[1], 2L)
z
z = csd$minus(1.0, csd$power(x[1], 2L))
z
rhs = csd$vertcat(csd$minus(csd$times(z, x[0]), x[1]), x[0])
rhs
ode = list()
ode["x"] = x
ode["rhs"] = rhs
ode = list()
ode[["x"]] = x
ode[["rhs"]] = rhs
list(a=1, b=2)
F = csd$integrator('F','cvodes',ode,list(tf = 4))
ode
ode = dict('x' = x, 'rhs' = rhs)
ode
F = csd$integrator('F','cvodes',ode,list(tf = 4))
F = csd$integrator('F','cvodes',ode,list(tf = 4L))
F = csd$integrator('F','cvodes',ode,dict(tf = 4))
F = csd$integrator('F','cvodes',ode,dict(tf = 4L))
ode
ode = dict("x" = x,"rhs" = rhs)
ode
ode = list()
ode[["x"]] = x
ode[["rhs"]] = rhs
ode
dict(ode)
dict(tf = 4)
F = csd$integrator('F','cvodes',dict(ode),dict(tf = 4))
dict(ode)
ode = list()
ode[["x"]] = x
ode[["ode"]] = rhs
F = csd$integrator('F','cvodes', ode,dict(tf = 4))
F = csd$integrator('F','cvodes', ode, list(tf = 4))
res = csd$F(x0 = c(0, 1))
res = F(x0 = c(0, 1))
res
type(x[1])
class(x[1])
x[1]
1 + x[1]
class(x[1])
csd$sum1(1, x[1])
"+.casadi.casadi.MX" = function(a, b) {
op = import("operator")
op$add(a, b)
}
x[1] + 1
"-.casadi.casadi.MX" = function(a, b) {
op = import("operator")
op$subtract(a, b)
}
x[1] - 1
"-.casadi.casadi.MX" = function(a, b) {
op = import("operator")
op$sub(a, b)
}
x[1] - 1
"**.casadi.casadi.MX" = function(a, b) {
op = import("operator")
op$power(a, b)
}
x[1]**2
"**.casadi.casadi.MX" = function(a, b) {
op = import("operator")
op$pow(a, b)
}
x[1]**2
x[1]**2L
x[1]
op = import("operator")
op$pow(x[1],2)
class(x[1])
"**.casadi.casadi.MX" = function(a, b) {
op = import("operator")
op$pow(a, b)
}
x[1]**2
"^.casadi.casadi.MX" = function(a, b) {
op = import("operator")
op$pow(a, b)
}
x[1]**2
x[1] + x[2]
x
x[0] + x[1]
source("casadi_generics.R")
x = csd$MX$sym('x', 2L)
z = 1 - x[1]**2
rhs = csd$vertcat(z * x[0] - x[1], x[0])
ode = list()
ode[["x"]] = x
ode[["ode"]] = rhs
ode = dict("x" = x,"rhs" = rhs)
F = csd$integrator('F','cvodes', ode, list(tf = 4))
ode = list()
ode[["x"]] = x
ode[["ode"]] = rhs
F = csd$integrator('F','cvodes', ode, list(tf = 4))
res = F(x0 = c(0, 1))
res$xf
tgrid = seq(0, 4, length = 100)
F = csd$integrator('F','cvodes', ode, list(tf = 4, tgrid = tgrid))
F = csd$integrator('F','cvodes', ode, list(tf = 4, grid = tgrid))
res = F(x0 = c(0, 1))
res$xf
py_to_r(res$xf)
tmp = res$xf
class(tmp)
tmp = res$xf$full
tmp
tmp = res$xf$full()
tmp = t(res$xf$full())
x = csd$MX$sym('x', 2)
x = csd$MX$sym('x', 2L)
p = csd$MX$sym('p')
z = 1-x[1]**2;
rhs = csd$vertcat(z*x[0]-x[1]+2*csd$tanh(p),x[0])
# ODE declaration with free parameter
ode = list("x" = x, "p" = p, "ode" = rhs)
# Construct a Function that integrates over 1s
F = csd$integrator('F','cvodes',ode,list(tf = 1))
# Control vector
u = MX$sym('u',4L,1L)
# Control vector
u = csd$MX$sym('u',4L,1L)
x = c(0, 1)  # Initial state
for (i in 0:3) {
# Integrate 1s forward in time:
# call integrator symbolically
res = F(x0=x,p=u[k])
x = res$xf
}
x = c(0, 1)  # Initial state
for (i in 0:3) {
# Integrate 1s forward in time:
# call integrator symbolically
res = F(x0=x,p=u[i])
x = res$xf
}
nlp = list()
nlp[["x"]] = u
nlp[["f"]] = csd$dot(u, u)
nlp[["g"]] = x
nlp = list()
nlp[["x"]] = u
nlp[["f"]] = csd$dot(u, u)
nlp[["g"]] = x
solver = csd$nlpsol('solver','ipopt',nlp)
res = solver(x0=0.2,lbg=0,ubg=0)
res$x
